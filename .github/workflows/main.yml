name: Network Analysis Simulation

on:
  schedule:
    - cron: '* * * * *'
  workflow_dispatch:
    inputs:
      target_range:
        description: 'Target network range for simulation'
        required: false
        default: '142.250.198.14/8'
      scan_type:
        description: 'Scan type'
        required: false
        default: 'simulation'
        type: choice
        options:
        - simulation
        - local-only

env:
  DEBIAN_FRONTEND: noninteractive

jobs:
  network-analysis:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          nmap \
          python3-venv \
          python3-pip \
          graphviz \
          net-tools \
          iproute2 \
          tcpdump \
          tshark \
          arp-scan
    
    - name: Setup Python virtual environment
      run: |
        python3 -m venv myenv
        source myenv/bin/activate
        pip install --upgrade pip
        pip install graphviz matplotlib pandas seaborn numpy
        echo "VIRTUAL_ENV=$PWD/myenv" >> $GITHUB_ENV
        echo "$PWD/myenv/bin" >> $GITHUB_PATH
    
    - name: Create analysis scripts
      run: |
        cat > simulate_network.py << 'EOF'
        #!/usr/bin/env python3
        import random
        import json
        import subprocess
        import sys
        from datetime import datetime
        import os
        
        try:
            import graphviz
            import matplotlib.pyplot as plt
            import pandas as pd
            import seaborn as sns
            import numpy as np
        except ImportError as e:
            print(f"Installing missing package: {e}")
            subprocess.check_call([sys.executable, "-m", "pip", "install", str(e).split("'")[1]])
            import graphviz
            import matplotlib.pyplot as plt
            import pandas as pd
            import seaborn as sns
            import numpy as np
        
        def generate_mock_hosts():
            base_ips = ['142.250.198.14', '17.253.144.10', '157.240.209.35', '54.239.28.85', '13.107.246.46', '23.7.244.207', '20.27.177.113']
            hosts = {}
            
            for i, ip in enumerate(base_ips):
                mac = f"00:{''.join([f'{random.randint(0,15):x}' for _ in range(10)])}"
                mac = ':'.join([mac[j:j+2] for j in range(0, len(mac), 2)])
                hosts[ip] = mac
            
            return hosts
        
        def simulate_nmap_scan():
            print("Simulating nmap scan...")
            hosts = generate_mock_hosts()
            
            nmap_results = []
            for ip, mac in hosts.items():
                ports = random.sample([22, 80, 443, 8080, 3389, 445, 135], random.randint(1, 4))
                nmap_results.append({
                    'ip': ip,
                    'mac': mac,
                    'ports': ports,
                    'os': random.choice(['Linux', 'Windows', 'Unknown']),
                    'hostname': f"host-{ip.split('.')[-1]}"
                })
            
            return nmap_results
        
        def create_network_visualization(hosts_data):
            dot = graphviz.Digraph(comment='Network Topology Simulation', format='png')
            dot.attr(rankdir='TB', size='12,8')
            dot.attr('node', shape='box', style='rounded,filled')
            
            dot.node('router', 'Router\\n142.250.198.14', fillcolor='red')
            
            for host in hosts_data:
                if host['ip'] != '142.250.198.14:
                    color = 'lightgreen' if host['os'] == 'Linux' else 'lightblue' if host['os'] == 'Windows' else 'yellow'
                    label = f"{host['hostname']}\\n{host['ip']}\\nPorts: {', '.join(map(str, host['ports']))}"
                    dot.node(host['ip'], label, fillcolor=color)
                    dot.edge('router', host['ip'])
            
            ips = [h['ip'] for h in hosts_data if h['ip'] != '142.250.198.14']
            for _ in range(random.randint(1, 3)):
                if len(ips) >= 2:
                    src, dst = random.sample(ips, 2)
                    dot.edge(src, dst, style='dashed', color='gray')
            
            return dot
        
        def create_statistics_charts(hosts_data):
            plt.style.use('seaborn-v0_8')
            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))
            fig.suptitle('Network Analysis Statistics', fontsize=16)
            
            os_counts = {}
            for host in hosts_data:
                os_counts[host['os']] = os_counts.get(host['os'], 0) + 1
            
            ax1.pie(os_counts.values(), labels=os_counts.keys(), autopct='%1.1f%%')
            ax1.set_title('Operating System Distribution')
            
            all_ports = []
            for host in hosts_data:
                all_ports.extend(host['ports'])
            
            port_counts = {}
            for port in all_ports:
                port_counts[port] = port_counts.get(port, 0) + 1
            
            if port_counts:
                ax2.bar(port_counts.keys(), port_counts.values())
                ax2.set_title('Common Ports')
                ax2.set_xlabel('Port Number')
                ax2.set_ylabel('Frequency')
            
            ip_last_octets = [int(host['ip'].split('.')[-1]) for host in hosts_data]
            ax3.hist(ip_last_octets, bins=10, alpha=0.7)
            ax3.set_title('IP Address Distribution')
            ax3.set_xlabel('Last Octet')
            ax3.set_ylabel('Count')
            
            dates = pd.date_range(start='2024-01-01', periods=30, freq='D')
            activity = np.random.poisson(len(hosts_data), size=30)
            ax4.plot(dates, activity, marker='o')
            ax4.set_title('Network Activity Over Time')
            ax4.set_xlabel('Date')
            ax4.set_ylabel('Active Hosts')
            ax4.tick_params(axis='x', rotation=45)
            
            plt.tight_layout()
            return fig
        
        def main():
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            
            nmap_data = simulate_nmap_scan()
            
            report = {
                'timestamp': timestamp,
                'scan_type': 'simulation',
                'total_hosts': len(nmap_data),
                'hosts': nmap_data,
                'summary': {
                    'os_distribution': {},
                    'common_ports': [],
                    'security_notes': []
                }
            }
            
            for host in nmap_data:
                os_name = host['os']
                report['summary']['os_distribution'][os_name] = report['summary']['os_distribution'].get(os_name, 0) + 1
            
            with open(f'network_report_{timestamp}.json', 'w') as f:
                json.dump(report, f, indent=2)
            
            with open(f'network_analysis_{timestamp}.txt', 'w') as f:
                f.write(f"Network Analysis Report - {timestamp}\n")
                f.write("="*50 + "\n\n")
                f.write(f"Total hosts discovered: {len(nmap_data)}\n\n")
                
                for host in nmap_data:
                    f.write(f"Host: {host['ip']} ({host['hostname']})\n")
                    f.write(f"  MAC: {host['mac']}\n")
                    f.write(f"  OS: {host['os']}\n")
                    f.write(f"  Open Ports: {', '.join(map(str, host['ports']))}\n\n")
            
            print("Creating network visualization...")
            network_graph = create_network_visualization(nmap_data)
            network_graph.render(f'network_topology_{timestamp}', cleanup=True)
            
            print("Creating statistics charts...")
            stats_fig = create_statistics_charts(nmap_data)
            stats_fig.savefig(f'network_statistics_{timestamp}.png', dpi=300, bbox_inches='tight')
            plt.close()
            
            print(f"Analysis completed. Generated files:")
            print(f"- network_report_{timestamp}.json")
            print(f"- network_analysis_{timestamp}.txt")
            print(f"- network_topology_{timestamp}.png")
            print(f"- network_statistics_{timestamp}.png")
            
            return timestamp
        
        if __name__ == "__main__":
            main()
        EOF
        
        chmod +x simulate_network.py
    
    - name: Run network analysis simulation
      run: |
        source myenv/bin/activate
        python3 simulate_network.py
        
        # Create index.html for GitHub Pages
        cat > index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>Network Analysis Results</title>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                .container { max-width: 1200px; margin: 0 auto; }
                .result { margin: 20px 0; padding: 20px; border: 1px solid #ddd; border-radius: 8px; }
                img { max-width: 100%; height: auto; margin: 10px 0; }
                .timestamp { color: #666; font-size: 0.9em; }
                .file-list { background: #f5f5f5; padding: 15px; border-radius: 4px; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>Network Analysis Results</h1>
                <p class="timestamp">Last updated: $(date)</p>
                
                <div class="result">
                    <h2>Generated Files</h2>
                    <div class="file-list">
        EOF
        
        # Add file links to HTML
        for file in *.png *.txt *.json; do
            if [ -f "$file" ]; then
                echo "<p><a href=\"$file\">$file</a></p>" >> index.html
            fi
        done
        
        cat >> index.html << 'EOF'
                    </div>
                </div>
                
                <div class="result">
                    <h2>Network Topology</h2>
        EOF
        
        for file in network_topology_*.png; do
            if [ -f "$file" ]; then
                echo "<img src=\"https://raw.githubusercontent.com/Uchida16104/Network-Analysis-Report/refs/heads/main/$file\" alt=\"Network Topology\" />" >> index.html
            fi
        done
        
        cat >> index.html << 'EOF'
                </div>
                
                <div class="result">
                    <h2>Network Statistics</h2>
        EOF
        
        for file in network_statistics_*.png; do
            if [ -f "$file" ]; then
                echo "<img src=\"https://raw.githubusercontent.com/Uchida16104/Network-Analysis-Report/refs/heads/main/$file\" alt=\"Network Statistics\" />" >> index.html
            fi
        done
        
        cat >> index.html << 'EOF'
                </div>
                
                <div class="result">
                    <h2>Analysis Report</h2>
                    <pre>
        EOF
        
        for file in network_analysis_*.txt; do
            if [ -f "$file" ]; then
                cat "$file" >> index.html
            fi
        done
        
        cat >> index.html << 'EOF'
                    </pre>
                </div>
            </div>
        </body>
        </html>
        EOF
    
    - name: Create results directory
      run: |
        mkdir -p results/$(date +%Y%m%d)
        cp *.png *.txt *.json results/$(date +%Y%m%d)/ 2>/dev/null || true
        cp index.html results/
        
        # Create archive
        tar -czf network_analysis_$(date +%Y%m%d_%H%M%S).tar.gz *.png *.txt *.json index.html
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: network-analysis-results-${{ github.run_number }}
        path: |
          *.png
          *.txt
          *.json
          *.tar.gz
          index.html
        retention-days: 30
    
    - name: Commit and push results
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add all generated files
        git add results/ *.png *.txt *.json *.tar.gz index.html
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Network analysis results - $(date '+%Y-%m-%d %H:%M:%S')" || echo "Nothing to commit"
          git push origin main || echo "Push failed, but continuing"
        fi
    
    - name: Setup Pages
      uses: actions/configure-pages@v5
      if: github.ref == 'refs/heads/main'
    
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v4
      if: github.ref == 'refs/heads/main'
      with:
        path: './results'
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      if: github.ref == 'refs/heads/main'
    
    - name: Create Release
      if: github.ref == 'refs/heads/main'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: analysis-${{ github.run_number }}
        release_name: Network Analysis ${{ github.run_number }}
        body: |
          Automated network analysis results
          
          Generated files:
          - Network topology visualization
          - Statistical analysis charts  
          - Detailed text report
          - JSON data export
          
          View online: ${{ steps.deployment.outputs.page_url }}
        draft: false
        prerelease: false
    
    - name: Summary
      run: |
        echo "## Network Analysis Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Execution Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Files Generated**: $(ls *.png *.txt *.json 2>/dev/null | wc -l)" >> $GITHUB_STEP_SUMMARY
        echo "- **Archive Created**: network_analysis_$(date +%Y%m%d_%H%M%S).tar.gz" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.deployment.outputs.page_url }}" != "" ]; then
          echo "- **View Results**: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Generated Files:" >> $GITHUB_STEP_SUMMARY
        for file in *.png *.txt *.json; do
          if [ -f "$file" ]; then
            echo "- \`$file\`" >> $GITHUB_STEP_SUMMARY
          fi
        done
